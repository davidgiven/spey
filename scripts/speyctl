#!/usr/bin/mawk -Wexec
# Script for manipulating the Spey configuration database.
#
# Copyright (C) 2004 David Given
# You may distribute under the terms of the GNU General Public
# License version 2 as specified in the file COPYING that comes with the
# Spey distribution.
#
# $Source$
# $State$

function usage()
{
	print "speyctl 0.3.3 (c) 2004 David Given"
	print "Syntax: speyctl [<options>...] <command> [<parameters>...]"
	print "Options:"
	print "    --help    -h                   Displays this message."
	print "    --db      -d <filename>        Use specified configuration file."
	print "                                     default: " configfile
	print ""
	print "Commands:"
	print "    init                     Create a new configuration file."
	print "    set <key> [<value>]      Set/display a single configuration value."
	print "    list                     List all configuration values to stdout."
	print "    trust <cmd> [<spec>]     Manipulate the trusted host table."
	print "    recipient <cmd> [<spec>] Manipulate the allowed recipients table."
	print "    whitelist <cmd> [<spec>] Manipulate the whitelist table."
	print "    blacklist <cmd> [<spec>] Manipulate the blacklist table."
	print "    stats                    List statistics."
	print "    statsreset               Reset statistic counters to 0."
	print "    showdb                   Show address database. (Warning --- can be large!)"
	print "    purge                    Purge stale addresses."
}

function error(s)
{
	print "speyctl: " s > "/dev/stderr"
	exit(1)
}

function Xlistsyntaxerror(list, s)
{
	error("syntax error: speyctl " list " [add or sub or list] [<spec>]")
}

function trim(s)
{
	t = s;
	sub(/^ */, "", t);
	sub(/ *$/, "", t);
	return t;
}

function sqlstart()
{
	sqlitecmd = "sqlite '" configfile "'"
	print "BEGIN;" | sqlitecmd
}

function sql(s)
{
	print s | sqlitecmd
}

function sqlend(tail)
{
	print "COMMIT;" | sqlitecmd
	print tail | sqlitecmd
	close(sqlitecmd)
}
	
function cmd_init()
{
	if (system("test -f " configfile) == 0)
		error("configuration file already exists")

	sqlstart()
	sql("CREATE TABLE triples (                 \
			id INTEGER PRIMARY KEY,                 \
			sender INTEGER NOT NULL,                \
			fromaddress VARCHAR NOT NULL,           \
			toaddress VARCHAR NOT NULL,             \
			timesseen INTEGER NOT NULL,             \
			firstseen INTEGER NOT NULL,             \
			lastseen INTEGER NOT NULL);")

	sql("CREATE TABLE trustedhosts (                \
		    left INTEGER NOT NULL,                  \
		    right INTEGER NOT NULL);                \
		INSERT INTO trustedhosts VALUES             \
		    (2130706433, 32);                       ")
		
	sql("CREATE TABLE validrecipients (             \
		    left VARCHAR,                           \
		    right VARCHAR);                         ")

	sql("CREATE TABLE settings (                \
		    key VARCHAR PRIMARY KEY,            \
		    value VARCHAR);                     \
		INSERT INTO settings VALUES             \
		    ('identity',        'yourdomain.invalid'); \
		INSERT INTO settings VALUES             \
		    ('intolerant',      '1');           \
		INSERT INTO settings VALUES             \
		    ('quarantine-time', '60');          \
		INSERT INTO settings VALUES             \
		    ('socket-timeout',  '30');          \
		INSERT INTO settings VALUES             \
		    ('invalid-expiry',  '86400');       \
		INSERT INTO settings VALUES             \
		    ('valid-expiry',    '1209600');	    \
		INSERT INTO settings VALUES             \
		    ('runtime-user-id', 'spey:spey');   \
		INSERT INTO settings VALUES             \
		    ('greet-pause',     '2');           ")

	sql("CREATE TABLE statistics (              \
		    key VARCHAR PRIMARY KEY,            \
		    value INTEGER);                     \
		INSERT INTO statistics VALUES           \
		    ('malformed-domain',    0);         \
		INSERT INTO statistics VALUES           \
		    ('malformed-address',   0);         \
		INSERT INTO statistics VALUES           \
		    ('illegal-relay',       0);         \
		INSERT INTO statistics VALUES           \
		    ('timeout',             0);         \
		INSERT INTO statistics VALUES           \
		    ('greylisted',          0);         \
		INSERT INTO statistics VALUES           \
		    ('accepted',            0);         \
		INSERT INTO statistics VALUES           \
		    ('whitelisted',         0);         \
		INSERT INTO statistics VALUES           \
		    ('spoke-too-soon',      0);			\
		INSERT INTO statistics VALUES           \
		    ('blackholed',          0);         ")

	sql("CREATE TABLE whitelist (               \
			sender VARCHAR,                         \
			recipient VARCHAR);")

	sql("CREATE TABLE blacklist (               \
			sender VARCHAR,                         \
			recipient VARCHAR);")

	sqlend()
}

function cmd_set(key, value)
{
	sqlstart()
	if (value == "")
		sql("DELETE FROM settings WHERE key='" key "';")
	else
	{
		sql("DELETE FROM settings WHERE key='" key "';")
		sql("INSERT INTO settings VALUES ('" key "', '" value "');")
	}
	sqlend()
}

function cmd_list()
{
	cmd = "sqlite -separator ' ' " configfile " 'SELECT * FROM settings'"
	print "Variable                 Value"
	print "----------------------------------------------------------"
	while (cmd|getline == 1)
	{
		printf "%-25s", $1
		$1 = ""
		print $0
	}
}

function cmd_stats()
{
	cmd = "sqlite -separator ' ' " configfile " 'SELECT * FROM statistics'"
	print "Counter                  Value"
	print "----------------------------------------------------------"
	while (cmd|getline == 1)
		printf "%-25s%s\n", $1, $2
}

function cmd_showdb()
{
	cmd = "sqlite -separator ' ' " configfile " 'SELECT * FROM triples ORDER BY timesseen'"
	while (cmd|getline == 1)
		printf "%04X%04X %4d %65s\n", $2/65536, $2%65536, $5, $3 "->" $4
}

function cmd_purge()
{
	sqlstart();
	sql("DELETE FROM triples WHERE 					\
			timesseen=1 AND					\
			lastseen<(STRFTIME('%s', 'now') -		\
				(SELECT value FROM settings WHERE	\
					key = 'invalid-expiry')		\
				);")
	
	sql("DELETE FROM triples WHERE					\
			timesseen>1 AND					\
			lastseen<(STRFTIME('%s', 'now') -		\
				(SELECT value FROM settings WHERE	\
					key = 'valid-expiry')		\
				);")
	sqlend();
}

function cmd_trust(op, value)
{
	if (op ~ /list/)
	{
		FS = ","
		cmd = "sqlite -separator ',' " configfile " 'SELECT left, right FROM trustedhosts'"
		while (cmd|getline == 1)
		{
			b1 = int($1 / (256*256*256)) % 256
			b2 = int($1 / (256*256)) % 256
			b3 = int($1 / 256) % 256
			b4 = int($1) % 256
			printf "%d.%d.%d.%d/%d\n", b1, b2, b3, b4, $2
		}
		return
	}

	if (value ~ /.*\/.*/)
	{
		if (split(value, array, /\//) > 2)
			Xlistsyntaxerror("trust")
		left = array[1]
		right = array[2]
		if (right == "")
			right = 32

		if (split(left, array, /\./) != 4)
			Xlistsyntaxerror("trust")
		left = ((array[1]*256 + array[2])*256 + array[3])*256 + array[4]
		left = sprintf("%.0f", left)
		table = "trustedhosts"
	}
	else
		Xlistsyntaxerror("trust")

	sqlstart()
	sql("DELETE FROM " table " WHERE "			\
		"left='" left "' AND right='" right "';")
	if (op ~ /add/)
		sql("INSERT INTO " table " VALUES "		\
			"('" left "', '" right "');")
	sqlend()
}

function cmd_recipient(op, value)
{
	if (op ~ /list/)
	{
		FS = ","		
		cmd = "sqlite -separator ',' " configfile " 'SELECT left, right FROM validrecipients'"
		while (cmd|getline == 1)
			printf "%s@%s\n", $1, $2
		return
	}

	if (value ~ /.*@.*/)
	{
		if (split(value, array, /@/) > 2)
			Xlistsyntaxerror("recipient")
		left = array[1]
		right = array[2]
		table = "validrecipients"
	}
	else
		Xlistsyntaxerror("recipient")

	sqlstart()
	sql("DELETE FROM " table " WHERE "			\
		"left='" left "' AND right='" right "';")
	if (op ~ /add/)
		sql("INSERT INTO " table " VALUES "		\
			"('" left "', '" right "');")
	sqlend()
}

function cmd_Xlist(op, list, value,    array, sender, recipient)
{
	if (list ~ /trust/)
		return cmd_trust(op, value)
	if (list ~ /recipient/)
		return cmd_recipient(op, value)
		
	if (op ~ /list/)
	{
		FS = ","
		cmd = "sqlite -separator ',' " configfile " 'SELECT sender, recipient FROM " list "'"
		print "                        Sender   Recipient"
		print "------------------------------   ------------------------------"
		while (cmd|getline == 1)
		{
			printf "% 30s : %s\n", $1, $2
		}
		return
	}

	if (split(value, array, /:/) != 2)
		error("speyctl " list ": spec is <sender pattern> : <recipient pattern>");
	sender = trim(array[1]);
	recipient = trim(array[2]);
	
	sqlstart()
	sql("DELETE FROM " list " WHERE "				\
		"sender='" sender "' AND recipient='" recipient "';")
	if (op ~ /add/)
		sql("INSERT INTO " list " VALUES "			\
			"('" sender "', '" recipient "');")
	sqlend()
}

function cmd_statsreset()
{
	sqlstart()
	sql("UPDATE statistics SET value=0;")
	sqlend()
}

function parseargs(  i)
{
	for (i=1; i<ARGC; i++)
	{
		opt = ARGV[i]
		if (opt ~ /^(-h)|(--help)$/)
			usage()
		else if (opt ~ /^(-d)|(--db)$/)
			configfile = ARGV[++i]
		else if (opt ~ /^init$/)
		{
			if (i != (ARGC - 1))
				error("too many parameters (try --help)")
			cmd_init()
			exit(0)
		}
		else if (opt ~ /^set$/)
		{
			key = ARGV[++i]
			value = ARGV[++i]
			if (i < (ARGC - 1))
				error("too many parameters (try --help)")
			if (key == "")
				error("syntax: speyctl set <key> [<value>]")
			cmd_set(key, value)
			exit(0)
		}
		else if (opt ~ /^list$/)
		{
			if (i != (ARGC - 1))
				error("too many parameters (try --help)")
			cmd_list()
			exit(0)
		}
		else if (opt ~ /^(trust)|(recipient)|(whitelist)|(blacklist)$/)
		{
			op = ARGV[++i]
			value = ARGV[++i]
			if (i < (ARGC - 1))
				error("too many parameters (try --help)")
			if ((op != "list") && (op != "add") && (op != "sub"))
				Xlistsyntaxerror(opt)
			cmd_Xlist(op, opt, value)
			exit(0)
		}
		else if (opt ~ /^stats$/)
		{
			if (i != (ARGC - 1))
				error("too many parameters (try --help)")
			cmd_stats()
			exit(0)
		}
		else if (opt ~ /^showdb$/)
		{
			if (i != (ARGC - 1))
				error("too many parameters (try --help)")
			cmd_showdb()
			exit(0)
		}
		else if (opt ~ /^purge$/)
		{
			if (i != (ARGC - 1))
				error("too many parameters (try --help)")
			cmd_purge()
			exit(0)
		}
		else if (opt ~ /^statsreset$/)
		{
			if (i != (ARGC - 1))
				error("too many parameters (try --help)")
			cmd_statsreset()
			exit(0)
		}
		else
			error("unrecognised option (try --help)")
	}
}

BEGIN {
	configfile = "/var/lib/spey/spey.db"
	arg1 = ""
	arg2 = ""
	parseargs()
	exit(0)
}

# Revision history
# $Log$
# Revision 1.12  2007/02/10 19:46:44  dtrg
# Added greet-pause support. Moved the trusted hosts check to right after
# connection so that greet-pause doesn't apply to trusted hosts. Fixed a bug
# in the AUTH supported that meant that authenticated connections had no
# extra privileges (oops). Added the ability to reset all statistics on demand.
#
# Revision 1.11  2007/02/10 00:24:35  dtrg
# Added support for TLS connections using the GNUTLS library. A X509
# certificate and private key must be supplied for most purposes, but if they
# are not provided anonymous authentication will be used instead (which
# apparently only GNUTLS supports). Split the relay check up into two
# separate parts; the trustedhosts table now specifies machines that can be
# trusted to play nice, and can do relaying and be allowed to bypass the
# greylisting; and allowedrecipients, which specifies what email address we're
# expecting to receive. Also fixed some remaining niggles in the AUTH
# proxy support, but this remains largely untested.
#
# Revision 1.10  2007/01/31 12:48:51  dtrg
# Dropping root privileges is now the default. The default database file
# has been moved into /var/lib/spey/spey.db to assist this.
#
# Revision 1.9  2005/09/30 23:19:05  dtrg
# Updated version number to 0.3.3. Also removed the previous default value for process-user-id; the variable is now called runtime-user-id, and we don't want a default value any more anyway.
#
# Revision 1.8  2005/09/25 23:26:23  dtrg
# Added support for dropping root privileges once spey has started up.
#
# Revision 1.7  2004/11/21 18:46:49  dtrg
# Updated version numbering to 0.3.2.
#
# Revision 1.6  2004/06/22 21:11:05  dtrg
# Widened the field width when displaying blacklists and whitelists.
#
# Revision 1.5  2004/06/21 23:16:00  dtrg
# Now explicitly specifies mawk, as neither gawk nor traditional awk support
# -Wexec (or equivalent).
#
# Revision 1.4  2004/06/21 23:12:46  dtrg
# Added blacklisting and whitelisting support.
#
# Revision 1.3  2004/05/16 17:39:53  dtrg
# Prevented IP addresses from being stored in the database in scientific notation to six s.f., which doesn't do them a lot of good.
#
# Revision 1.2  2004/05/13 23:36:01  dtrg
# Rewrote speyctl in awk, a much better scripting language than the Bourne shell.
# It now works way better, is much easier to understand, and is probably much
# faster. Added the interface to allow modification of the relay table with
# speyctl, and wrote all the documentation.
#
# Revision 1.1  2004/05/01 12:20:20  dtrg
# Initial version.
