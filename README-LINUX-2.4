Notes on running spey on Linux kernel 2.4 systems
=================================================

Linux with kernel 2.4 uses a version of glibc with the linuxthreads helper
library. This thread provides the pthreads interface to the kernel's
underlying thread functionality.

Unfortunately, spey's coroutines support conflicts terminally with
linuxthreads. It is not possible to use coroutines *and* pthreads at the
same time. This would normally be fine, except on some distributions,
including Debian, the sqlite database library has been compiled to use
pthreads.

The upshot of this is that, basically, and most unfortunately, if you use a
Linux 2.4 kernel, spey may not work for you out of the box. If you see an
immediate crash on startup, you are running into this issue.

All is not lost, however. There is a workaround: you need to recompile the
Sqlite library manually to avoid it linking against the pthreads library.
Sqlite 2 can be obtained here: http://www.sqlite.org/download.html
...and it is fairly straightforward to compile. One this is done, you can
statically link spey against it, and it should work fine. You don't need
to do a full installation of sqlite; your distribution's existing one will
work everywhere else.

Spey works fine on Linux 2.6 machines. (The 2.6 glibc uses a different
threading implementation that doesn't have this problem.)

The technical reason is as follows: linuxthreads supplies its own version of
malloc() that is thread-safe. In order to do this, malloc() must determine
what thread it is running in. linuxthreads does this by examining the
current stack frame; it tags all of its stack frames with a magic number, so
by looking at the magic number, it knows which thread the stack belongs to.

However, spey allocates its own stack frames (see src/Threadlet.cc around
line 63). These stack frames aren't tagged. linuxthreads still looks for the
magic number, doesn't find it, reads the value anyway, jumps off into la-la
land and dies in a heap on the floor.

David Given
dg@cowlark.com
2005-11-20
