'\" t
.\" ** The above line should force tbl to be a preprocessor **
.\" Man page for spey
.\"
.\" Copyright (C) 2004 David Given
.\" You may distribute under the terms of the GNU General Public
.\" License version 2 as specified in the file COPYING that comes with the
.\" spey distribution.
.\"
.\" $Source$
.\" $State$
.\"
.TH spey 8 "6 November 2007" "0.5" "SMTP proxy"
.SH NAME
spey \- a smart, spam-blocking SMTP proxy

.SH SYNOPSIS
.B spey
.RB [\| \-h
or
.BR \-\-help \|]
.RB [\| \-f 
or 
.B \-\-from
.IR listenaddress \|]
.RB [\| \-t 
or 
.B \-\-to
.IR destinationaddress \|]
.RB [\| \-d 
or 
.B \-\-database
.IR database \|]
.RB [\| \-v 
or 
.B \-\-verbose
.IR verbosity \|]
.RB [\| \-x
or
.BR \-\-foreground \|]
.RB [\| \-i
or
.BR \-\-inetd \|]




.SH DESCRIPTION
.B spey
is a smart SMTP proxy that implements greylisting as a spam prevention measure.
It acts as a layer between the outside world and your ordinary mail server; it
monitors the transaction, and hijacks it if necessary to prevent messages being
retrieved.

For more information on greylisting, see
.BR http://projects.puremagic.com/greylisting/ .

spey stores all of its configuration settings (other than those specified on
the command line) in an
.B Sqlite
database. By default this is stored in
.I /var/lib/spey/spey.db ,
although it can be overridden if necessary. To manipulate the database, for
example to set or change one of spey's configuration variables, use the
.B speyctl(8)
command.




.SH OPTIONS
spey understands the following options:


.TP
.BI --from\  address

Specifies the source address to listen on, in the standard
.IR address : port
format. Use 0.0.0.0 for the address to tell spey to listen on all interfaces.
The default is
.BR 0.0.0.0:25 .


.TP
.BI --to\  address

Specifies the address to connect to; this is where your real mail server is
listening. The address is specified as for the source address. The default is
.BR localhost:2525 .


.TP
.BI --database\  filename

Specifies the database file to use. The file must have already have been
created with
.BR speyctl(8) .
The default is
.I /var/lib/spey/spey.db .
Be aware that by default,
.B runtime-user-id
is switched on. This affects how the file permissions should be set. See
.B DROPPING ROOT PRIVILEGES
below.


.TP
.BI --verbose\  level

Specifies the verbosity level. Use 0 to suppress all output; increasing the
number will produce more and more detailed tracing. The levels of verbosity
are:

.TS
tab(|);
ll.
0|No tracing
1|System messages
2|Warning messages
3|Informational messages
4|SMTP command/response parse information
5|Detailed processing information
6|SMTP tracing
7|Thread tracing
8|SQL tracing
.TE

Each output line starts with a code of the form
.BR X[Y] ,
where X is the verbosity level of the message and Y is the file descriptor
that corresponds to the connection. If the file descriptor is
.B M
then the message is referring to spey as a whole.

.TP
.BI --inetd

Forces spey into inetd mode. When running like this, spey will process a single
message and exit; it will assume that stdin/stdout is connected to the external
SMTP client. The
.B from
and
.B foreground
settings are ignored.

This mode is not recommended as there is considerable overhead in starting up
and shutting down, due to Sqlite opening and closing the database. However, it
may be useful if you do not wish to have spey running all the time, or wish to
force true multithreaded mode.


.TP
.BI --foreground

Prevents spey from detaching itself from the console. Instead, it will run in
the foreground and all tracing will be sent to
.BR stderr .
This is frequently useful for debugging. This flag is implicit in
.B inetd
mode.




.SH "CONFIGURATION VARIABLES"
spey uses a number of configuration variables, stored in the database, to
control itself. You can list and change these with the
.B speyctl(8)
command.


.TP
.B identity

Sets how spey announces itself to incoming connections in the initial banner.
Technically this should be the name of your mail domain; in the real world,
frequently this is set to a dummy value. SMTP connections do not use this value
for any useful purpose other than diagnostics.


.TP
.B quarantine-time

Controls the delay between a message arriving and spey marking that particular
address/sender/receiver tuple as valid. This is an integer, in seconds.


.TP
.B intolerant

Controls whether spey is intolerant of SMTP errors or not. An integer, either 0
or 1. If set, then spey will automatically disconnect from the potential
spammer whenever an SMTP error occurs (after reporting the error, of course).
While this does violate the RFC, SMTP errors do not usually occur during
legitimate mail transactions. Setting this will reduce the amount of time taken
to deal with any particular spammer.


.TP
.B socket-timeout

Controls how long spey will wait on a socket when there is no traffic. An
integer, in seconds. The RFC dictates from between 60 and 300 seconds; it
defaults to 30. See
.B BUGS
below. Set to 0 if you want to disable the timeout completely.


.TP
.B greet-pause

Enables filtering of overeager clients. An integer containing the length of
the delay to use, or 0 to disable. Defaults to 0 if unset.

The RFC decrees that after connecting to a mail server, a client should wait
until the server responds with the 220 banner before sending commands. Spam
programs and viruses usually don't do this. By briefly waiting before sending
the banner and checking to see if the client sends a command too soon, it is
very easy to efficiently filter out most of these.

Don't make the delay too long, or legitimate mail clients will give up and
fail. The author uses 5.


.TP
.B invalid-expiry

Controls how long spey should keep tuples that have been seen only once in the
database. An integer, in seconds. When the database is purged, any tuples where
the hit count is 1 and the time last seen is older than this value will be
discarded. The default is 24 hours.


.TP
.B valid-expiry

Controls how long spey should keep unused tuples that have been seen more than
once in the database. An integer, in seconds. When the database is purged, any
tuples that have not been seen for longer than the specified time will be
discarded. The default is a week.


.TP
.B runtime-user-id

If set, this variable causes spey to drop root privileges once its
initialisation is complete. The value should be a string of the form
.BR username:groupname .
See
.B DROPPING ROOT PRIVILEGES
below for more information.

If you do not want spey to drop root privileges, then leave this variable
unset. Newly created databases have this set to
.BR spey:spey .


.TP
.B tls-certificate-file

Specifies the path of the SSL certificate (the
.I .pem
file). to be used when TLS is enabled. See
.BR external-tls .


.TP
.B tls-private-key-file

Specifies the path of the SSL key to be used when TLS is enabled (the
.I .key
file). See
.BR external-tls .


.TP
.B external-tls

Enables the use of TLS by external users. An integer, either 0 or 1,
defaulting to 0.

If you use TLS, it's strongly recommended that you specify the
.B tls-certificate-file
and
.B tls-private-key-file
parameters as well; this will allow far more types of client to use TLS and
connect to spey. Otherwise spey will attempt to use GNUTLS' anonymous
authentication, which is not supported by most other SSL implementations.


.TP
.B external-auth-mode

Enables use of AUTH by external users. A string, which can be 'none', 'proxy'
or 'internal', defaulting to 'none'.

When set to 'none', SMTP AUTH is disabled.

When set to 'proxy', spey will proxy the AUTH request to
the internal server. If the authentication succeeds then any greylisting or
blacklisting will be bypassed. Only authentication is supported. If a client
tries to negotiate a security layer, spey will get very confused. It is
recommended that you turn this feature off in your MTA.

When set to 'internal', spey will perform its own AUTH validation against
its own list of users (see AUTHENTICATION). If the authentication succeeds
then any greylisting or blacklisting will be bypassed. 



.TP
.B rbl-list

Enables use of DNS-based RBLs (Realtime Blackhole Lists).

To use, set this variable to a whitespace-delimited list of RBL zone names.
Any new connections will be verified against each RBL in turn. If the
connecting host is listed, the connection will be closed.

.B Warning:
Use of an RBL means that you are
.IR "handing over control of your email server to someone else" .
Think carefully before you do this. There are many RBLs, run by different
people with different standards of what makes a particular IP address
worthy of blackholing. If you are a commercial organisation and require
communication with someone at, say, Google Mail, and your RBL provider
decides on a whim to blacklist Google Mail's email servers, you will be out
of luck. Choose your RBLs carefully.

RBL lookups are not done for machines in the trusted list, but are done for
authenticated sessions (because RBL lookups happen before the client has had
a chance to authenticate).




.SH "TRUSTED MACHINES"

Before anything else is done, spey matches the IP addresses of the machines that
connect to it to determine whether they are special trusted machines or not.
If they are trusted, then all other checks will be bypassed. In other words, any
machine on this list may spam at will.

This table can be manipulated by
.BR speyctl(8) ,
and contains zero or more keys of the form
.BR ipaddress/width .

It is recommended that
.B 127.0.0.1/32
is added, so that mail may be sent from the local machine. You may also wish
to add your private network address so that any machine in your private
network can send mail:
.BR 10.0.0.0/8
or
.BR 172.16.0.0/16 .
If you use
.BR 0.0.0.0/0 ,
spey will allow connections to be made from any host, disabling the relay
checking completely. Don't do this unless you are absolutely sure about
what you are doing!

If you want to allow certain users to relay mail through spey, you probably
want to use SMTP AUTH instead; see the AUTHENTICATION section.




.SH "ALLOWED RECIPIENTS"

If a machine is not trusted, but before greylisting is done, spey checks the
email address in order to determine whether it makes sense at all to handle
the message. The message is checked against a table which, again, can be
manipulated with
.BR speyctl(8) .
It contains keys of the form
.BR address@domain .

Either the address or domain part may be blank, which acts as a wildcard.
You will want at least one entry, otherwise you won't be able to receive email
at all; the author has
.BR @cowlark.com ,
meaning that all messages to an address at the
.B cowlark.com
domain will be accepted. A key of
.B @
will match all messages.

Messages that are not addressed to a recipient on this table will be rejected
out of hand.




.SH "AUTHENTICATION"

When the
.B external-auth-mode
configuration key is set to 'internal', spey handles its own AUTH management.

spey currently supports the PLAIN and LOGIN regimes. Usernames
and passwords are stored in the database, and may be modified with the
.B speyctl(8)
command. AUTH is only supported on encrypted sessions so you must have
.B external-tls
switched on and configured.

.B Warning:
Passwords are stored in plain text in the database, which means that any user
who has access to the database file will be able to read them. What's more,
with the right settings, passwords may appear in clear in the logfile. You
should not use valuable passwords with spey.

Once correctly authenticated, all further checks are disabled. The most
common use for this is to allow users to relay mail via spey from external
connections.




.SH "BLACKLISTS AND WHITELISTS"

In addition to the automatic greylisting, spey also has blacklists and
whitelists. These allow the user to override the greylisting mechanism. This
can be useful for, for example, mailing lists that generate unique sender
addresses for each message. Whitelists allow messages to be accepted without
having to pass through the greylister; blacklists allow messages to be rejected
before they reach the greylister.

The blacklist and whitelist tables work identically, and may be manipulated with the
.BR speyctl(8)
command. They each contain zero or more keys.

Keys are of the form
.B <sender pattern>
:
.BR "<recipient pattern>" .
Patterns are standard SQL glob patterns that are matched against the email
address. Briefly, use
.B %
to match any number of characters, or
.B _
to match an individual character. Note that both patterns must match for the
blacklist or whitelist to go into effect.

For example: I subscribe to the
.B comp.risks
mailing list. Because this mailing list autogenerates sender addresses, in
order to avoid greylisting an entry must be added to the whitelist. The pattern
.B %@catless.ncl.ac.uk : dg@cowlark.com
does this. This will allow any message to me from the
.B catless
mail server to bypass the greylist. (This is very bad news should
.B catless
ever host a spammer, but if you know
.BR comp.risks ,
you'll agree with me that this is not likely to happen.)

In addition, the author gets lots of spam from
.BR moosq.com ,
which I would rather not get. This particular spammer has a number of different
domains, but the sender addresses all follow a similar pattern, so 
.B b.esales%cowlark.com% : dg@cowlark.com
will block them.

Beware! Blacklists have the ability to consume all your email if you do not
configure them properly. Adding the pattern
.B % : %
to either list will make your life a misery; in your whitelist this will cause
you to get
.I all
mail, including spam; and in your blacklist it will cause you to get
.I no
mail, ever. It is strongly recommended that you make the patterns as specific
as possible.

If a message is caught by the blacklist, it will be rejected with a 554 SMTP
response code rather than the 451 that greylisting produces. This should tell
the remote server not to try resending it.




.SH DROPPING ROOT PRIVILEGES
spey has optional support for relinquishing root privileges after startup. This
is for enhanced safety; if any security hole results in spey being compromised
by a remote attacker, then it restricts any attack to trashing spey, preventing
the attacker from damaging the rest of the system.

By default, this is enabled (new in version 0.3.4). It can be disabled by
unsetting the
.B runtime-user-id
configuration variable. (See above for more information.)

In order for spey to work when dropping root privileges, then you must place
spey's database file in a directory that spey can write to. (This is due to the
need for spey's SQL library to create temporary files.) If you wish to use a
non-standard location, you will need to use the
.B --database
command-line option to tell spey where it is. (You will also need the
.B --db
command-line option for speyctl.)

In order to use this feature, you will almost certainly want to create a
specific user and group for spey; by default,
.BR spey:spey .
The truly paranoid can then apply a disk quota to
that user to prevent any attackers from consuming all available disk space,
but this is probably unnecessary; you should also be aware that if spey ever
runs out of quota for legitimate reasons it will stop working.




.SH BUGS
spey is beta software. It has bugs. spey is not guaranteed to do anything
useful with your email. It may throw it all away into a big, black box and you
will never see it again. Do not use spey in a mission-critical environment
unless you are willing to take all responsibility for the consequences.

spey is also quite inefficient. It was written to be robust and reliable rather
than fast; optimisation will occur at a later stage. In particular, every time
a client connects a new connection is made to the local mail server. There's no
reason why spey couldn't keep reusing the same connection, which would reduce
quite a lot of overhead.

spey assumes only one instance of it will be running on any one system. This is
incorrect, but easily fixed.

spey plays fast and loose with the RFC. There are a number of places where it
is actively violating it, but I've had good reason in each instance. It appears
to interoperate happily with most mail software; the author is using it and
the only mail server that that has a problem is Yahoo's subscription probing,
which violates the RFC anyway. It even gets on well with SMTP callbacks.

That said, there are almost certainly major problems with it. Please report
them!




.SH FILES
.TP
.I /var/lib/spey/spey.db
The default database.

.TP
.I /var/run/spey.pid
The process ID of the currently running daemon is written here on startup.

.SH "AUTHOR & LICENSE"
.B spey
and
.B speyctl
are (C) 2004 David Given. Comments and criticism to
.BR dg@cowlark.com .
They are distributable under the terms of the GNU General Public License V2. A
full copy can be found in the spey source distribution, or at
.BR http://www.fsf.org/copyleft/gpl.html .
