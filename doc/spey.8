'\" t
.\" ** The above line should force tbl to be a preprocessor **
.\" Man page for spey
.\"
.\" Copyright (C) 2004 David Given
.\" You may distribute under the terms of the GNU General Public
.\" License version 2 as specified in the file COPYING that comes with the
.\" spey distribution.
.\"
.\" $Source$
.\" $State$
.\"
.TH spey 8 "30 September 2005" "0.3.3" "SMTP preprocessor"
.SH NAME
spey \- a smart, spam-blocking SMTP proxy

.SH SYNOPSIS
.B spey
.RB [\| \-h
or
.BR \-\-help \|]
.RB [\| \-f 
or 
.B \-\-from
.IR listenaddress \|]
.RB [\| \-t 
or 
.B \-\-to
.IR destinationaddress \|]
.RB [\| \-d 
or 
.B \-\-database
.IR database \|]
.RB [\| \-v 
or 
.B \-\-verbose
.IR verbosity \|]
.RB [\| \-x
or
.BR \-\-foreground \|]
.RB [\| \-i
or
.BR \-\-inetd \|]

.SH DESCRIPTION
.B spey
is a smart SMTP proxy that implements greylisting as a spam prevention measure.
it acts as a layer between the outside world and your ordinary mail server; it
monitors the transaction, and hijacks it if necessary to prevent messages being
retrieved.

for more information on greylisting, see
.br http://projects.puremagic.com/greylisting/ .

spey stores all of its configuration settings (other than those specified on
the command line) in a
.B Sqlite
database. By default this is stored in
.br /var/lib/misc/spey.db ,
although it can be overridden if necessary. To manipulate the database, for
example to set or change one of spey's configuration variables, use the
.b speyctl(8)
command.

.SH OPTIONS
spey understands the following options:

.TP
.BI --from\  address

Specifies the source address to listen on, in the standard
.IR address : port
format. Use 0.0.0.0 for the address to tell spey to listen on all interfaces.
The default is
.BR 0.0.0.0:25 .

.TP
.BI --to\  address

Specifies the address to connect to; this is where your real mail server is
listening. The address is specified as for the source address. The default is
.BR localhost:2525 .

allows you to manipulate the spey's configuration, as well as examining and
manipulating the address database.

.TP
.BI --database\  filename

Specifies the database file to use. The file must have already have been created with
.BR speyctl(8) .
The default is
.BR /var/lib/misc/spey.db .

.TP
.BI --verbose\  level

Specifies the verbosity level. Use 0 to suppress all output; increasing the
number will produce more and more detailed tracing. Tracing is always sent to
.BR stdout .

.TP
.BI --inetd

Forces spey into inetd mode. When running like this, spey will process a single
message and exit; it will assume that stdin/stdout is connected to the external
SMTP client. The
.BR from ,
.B to
and
.B foreground
settings are ignored.

This mode is not recommended as there is considerable overhead in starting up
and shutting down, due to Sqlite opening and closing the database. However, it
may be useful if you do not wish to have spey running all the time, or wish to
force true multithreaded mode.

.TP
.BI --foreground

Prevents spey from detaching itself from the console. Instead, it will run in
the foreground and all tracing will be sent to
.BR stderr .
This is frequently useful for debugging. This flag is ignored in
.B inetd
mode.

.SH "CONFIGURATION VARIABLES"
spey uses a number of configuration variables, stored in the database, to
control itself. You can list and change these with the
.B speyctl(8)
command.

.TP
.B identity

Sets how spey announces itself to incoming connections in the initial banner.
Technically this should be the name of your mail domain; in the real world,
frequently this is set to a dummy value. SMTP connections do not use this value
for any useful purpose other than diagnostics.

.TP
.B quarantine-time

Controls the delay between a message arriving and spey marking that particular
address/sender/receiver tuple as valid. This is an integer, in seconds.

.TP
.B intolerant

Controls whether spey is intolerant of SMTP errors or not. An integer, either 0
or 1. If set, then spey will automatically disconnect from the potential
spammer whenever an SMTP error occurs (after reporting the error, of course).
While this does violate the RFC, SMTP errors do not usually occur during
legitimate mail transactions. Setting this will reduce the amount of time taken
to deal with any particular spammer.

.TP
.B socket-timeout

Controls how long spey will wait on a socket when there is no traffic. An
integer, in seconds. The RFC dictates from between 60 and 300 seconds; it
defaults to 30. See
.B BUGS
below. Set to 0 if you want to disable the timeout completely.

.TP
.B invalid-expiry

Controls how long spey should keep tuples that have been seen only once in the
database. An integer, in seconds. When the database is purged, any tuples where
the hit count is 1 and the time last seen is older than this value will be
discarded. The default is 24 hours.

.TP
.B valid-expiry

Controls how long spey should keep unused tuples that have been seen more than
once in the database. An integer, in seconds. When the database is purged, any
tuples that have not been seen for longer than the specified time will be
discarded. The default is a week.

.TP
.B runtime-user-id

If set, this variable causes spey to drop root privileges once its
initialisation is complete. The value should be a string of the form
.BR username:groupname ;
spey must have write access to the file
.I containing
its database file in order to work (because Sqlite needs to create a journal
file in the same directory).

If you do not want spey to drop root privileges, then leave this variable
unset.

.SH "MESSAGE RELAYING"

Before greylisting is done, spey matches messages against a table to determine
whether to accept them or not. This provides an overall access control
mechanism necessary to prevent abuse of your mail server. This table can be
manipulated by
.BR speyctl(8) ,
and contains zero or more keys.

Keys are of the form
.B ipaddress/width
or
.BR address@domain .
The first form specifies allowed senders. Any connections from an address that
matches the key will be allowed to relay to any address. It is recommended that
.B 127.0.0.1/32
is added, so that mail may be sent from the local machine. The author has
.B 10.0.0.0/8
so that any machine in his private network can send mail.
Another useful example is
.BR 172.16.0.0/16 .
.B 0.0.0.0/0
will allow connections to be made from any host, disabling the relay checking
completely. Don't do this unless you are absolutely sure about what you are
doing!

The second form specifies allowed recipients. Either the address or domain part
may be blank, which acts as a wildcard. Unless you have configured spey as an
open relay above, you will want at least one entry; the author has
.BR @cowlark.com ,
meaning that all messages to an address at the
.B cowlark.com
domain will be accepted. A key of
.B @
will match all messages and will disable the relay checking.


.SH "BLACKLISTS AND WHITELISTS"

In addition to the automatic greylisting, spey also has blacklists and
whitelists. These allow the user to override the greylisting mechanism. This
can be useful for, for example, mailing lists that generate unique sender
addresses for each message. Whitelists allow messages to be accepted without
having to pass through the greylister; blacklists allow messages to be rejected
before they reach the greylister.

The blacklist and whitelist tables work identically, and may be manipulated with the
.BR speyctl(8)
command. They each contain zero or more keys.

Keys are of the form
.B <sender pattern>
:
.BR "<recipient pattern>" .
Patterns are standard SQL glob patterns that are matched against the email
address. Briefly, use
.B %
to match any number of characters, or
.B _
to match an individual character. Note that both patterns must match for the
blacklist or whitelist to go into effect.

For example: I subscribe to the
.B comp.risks
mailing list. Because this mailing list autogenerates sender addresses, in
order to avoid greylisting an entry must be added to the whitelist. The pattern
.B %@catless.ncl.ac.uk : dg@cowlark.com
does this. This will allow any message to me from the
.B catless
mail server to bypass the greylist. (This is very bad news should
.B catless
ever host a spammer, but if you know
.BR comp.risks ,
you'll agree with me that this is not likely to happen.)

In addition, the author gets lots of spam from the
.BR moosq.com ,
which I would rather not get. This particular spammer has a number of different
domains, but the sender addresses all follow a similar pattern, so 
.B b.esales%cowlark.com% : dg@cowlark.com
will block them.

Beware! Blacklists have the ability to consume all your email if you do not
configure them properly. Adding the pattern
.B % : %
to either list will make your life a misery; in your whitelist this will cause
you to get
.I all
mail, including spam; and in your blacklist it will cause you to get
.I no
mail, ever. It is strongly recommended that you make the patterns as specific
as possible.

If a message is caught by the blacklist, it will be rejected with a 554 SMTP
response code rather than the 451 that greylisting produces. This should tell
the remote server not to try resending it.


.SH DROPPING ROOT PRIVILEGES
spey has optional support for relinquishing root privileges after startup. This
is for enhanced safety; if any security hole results in spey being compromised
by a remote attacker, then it restricts any attack to trashing spey, preventing
the attacker from damaging the rest of the system.

By default, this is disabled, partly for backwards compatibility reasons, and
partly because it is a little fiddly to set up (and spey should be secure
anyway). It can be enabled by setting the
.B runtime-user-id
configuration variable. (See above for more information.)

In order for spey to work when dropping root privileges, then you must place
spey's database file in a directory that spey can write to. (This is due to the
need for spey's SQL library to create temporary files.) Because the database
is now in a non-standard location, you will need to use the
.B --database
command-line option to tell spey where it is. (You will also need the
.B --db
command-line option for speyctl.)

If you wish to use this feature, you will almost certainly want to create a
specific user and group for spey. The truly paranoid can then apply a quota to
that user to prevent any attackers from consuming all available disk space,
but this is probably unnecessary; you should also be aware that if spey ever
runs out of quota for legitimate reasons it will stop working.

Dropping root privileges will probably become the default at some point in the
future.


.SH BUGS
spey is beta software. It has bugs. spey is not guaranteed to do anything
useful with your email. It may throw it all away into a big, black box and you
will never see it again. Do not use spey in a mission-critical environment
unless you are willing to take all responsibility for the consequences.

spey is also quite inefficient. It was written to be robust and reliable rather
than fast; optimisation will occur at a later stage. In particular, every time
a client connects a new connection is made to the local mail server. There's no
reason why spey couldn't keep reusing the same connection, which would reduce
quite a lot of overhead.

spey assumes only one instance of it will be running on any one system. This is
incorrect, but easily fixed.

spey plays fast and loose with the RFC. There are a number of places where it
is actively violating it, but I've had good reason in each instance. It appears
to interoperate happily with most mail software; the author is using it and
doesn't seem to have lost any mail yet (that he's noticed). It even gets on
well with SMTP callbacks.

That said, there are almost certainly major problems with it. Please report
them!


.SH FILES
.TP
.I /var/lib/misc/spey.db
The default database.

.TP
.I /var/run/spey.pid
The process ID of the currently running daemon is written here on startup.

.SH "AUTHOR & LICENSE"
.B spey
and
.B speyctl
are (C) 2004 David Given. Comments and criticism to
.BR dg@cowlark.com .
They are distributable under the terms of the GNU General Public License V2. A
full copy can be found in the spey source distribution, or at
.BR http://www.fsf.org/copyleft/gpl.html .

.\" Revision history
.\" $Log$
.\" Revision 1.10  2005/10/08 22:26:56  dtrg
.\" Added extended documentation for the root privilege relinquish feature.
.\"
.\" Revision 1.9  2005/09/30 23:20:17  dtrg
.\" Updated the version number for 0.3.3. Added support for dropping root privileges, by setting the runtime-user-id configuration variable to the desired user and group.
.\"
.\" Revision 1.8  2004/11/21 18:46:49  dtrg
.\" Updated version numbering to 0.3.2.
.\"
.\" Revision 1.7  2004/06/30 21:44:00  dtrg
.\" Updated version number for 0.3.1.
.\"
.\" Revision 1.6  2004/06/22 21:11:29  dtrg
.\" Updated version numbers to 0.3.0.
.\"
.\" Revision 1.5  2004/06/21 23:12:46  dtrg
.\" Added blacklisting and whitelisting support.
.\"
.\" Revision 1.4  2004/05/30 13:43:45  dtrg
.\" Decided to make new version 0.2.9, not 0.3, as there are no actual user-visible
.\" new features. Plus I want a delay for bugfixing.
.\"
.\" Revision 1.3  2004/05/30 01:55:13  dtrg
.\" Numerous and major alterations to implement a system for processing more than
.\" one message at a time, based around coroutines. Fairly hefty rearrangement of
.\" constructors and object ownership semantics. Assorted other structural
.\" modifications.
.\"
.\" Revision 1.2  2004/05/13 23:36:01  dtrg
.\" Rewrote speyctl in awk, a much better scripting language than the Bourne shell.
.\" It now works way better, is much easier to understand, and is probably much
.\" faster. Added the interface to allow modification of the relay table with
.\" speyctl, and wrote all the documentation.
.\"
.\" Revision 1.1  2004/05/01 12:20:20  dtrg
.\" Initial version.
.\"
