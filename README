                                   SPEY V0.3.2
                                   ===========

                                  Beta release
                              (C) 2004 David Given
                                   2004-11-21

INTRODUCTION
============

Spey is a smart SMTP proxy whose main function in life is to block spam by
implementing greylisting. Greylisting is a really simple but effective way of
determining which messages are real and which aren't by relying on the fact
that spammers can't usually afford to run real mail servers; see:

	http://projects.puremagic.com/greylisting/

...for more information.

Spey uses the Sqlite library to keep track of which addresses its seen before,
so you'll need that before you can use it.

IF YOU'VE USED SPEY BEFORE
==========================

The database files used by 0.3 are NOT compatible with those used by prior
versions.  You will have to delete the file and recreate it using speyctl (the
new speyctl that comes with 0.3, of course). If you try to run spey with an old
configuration file... well, on your own head be it.

INSTALLATION
============

The installation process is, unfortunately, very primitive. There's a simple
makefile. Run it. Spey should build. If you're the superuser, 'make install'
will install everything into, probably, the wrong place. A startup/shutdown
script will also be placed in /etc/init.d/spey.

All the code should, ideally, use standard Posix and C++ features. There might
be some Linuxisms or gccisms that have crept in; if you find any, these are
bugs, so please inform me.

REQUIREMENTS
============

- sqlite, version 2.8.13 or compatible.  Note that libsqlite 3.0 is
  *unsupported*. If you can get it to work, great (and please tell me). But I
  recommend staying with 2.8. Note that 2.4 *does not work*.

  Debian users! The libsqlite-dev package is 2.4. You need to upgrade to
  libsqlite0-dev.

- mawk, any version. This is needed for the speyctl program. If your mawk is
  installed in a strange place, or if you want to use a different awk anyway,
  you'll need to edit scripts/speyctl before installation.

CONFIGURATION
=============

Spey works by listening on one port, normally your convention SMTP port, and
forwarding the connections to another port, where your real mail server is
listening.  If you like you can run the mail server on another machine than you
run Spey; Spey itself doesn't care.

I'm assuming that you've reconfigured your mail server to listen on the address
localhost:2525 and that it's happy to receive mail from localhost.

Step 1
------

You need to configure Spey. Spey stores all its configuration information in
its database, which by default lives in /var/lib/misc/spey.db. You need to
create this before you can do anything. You can do this with the command:

	speyctl init

There are two things you need to do at minimum to configure spey. Firstly, you
need to tell spey who to announce itself as in the SMTP banner. (Technically
this isn't necessary, but the RFC requires it, and it's considered polite.) You
do it like this:

	speyctl set identity 'mydomain.com'

Secondly, you need to tell spey who it is going to be receiving mail from. Most
users will want to do this:

	speyctl relay add '@mydomain.com'
	speyctl relay add '127.0.0.1/32'

This tells spey to accept all mail to any address at mydomain.com; and to relay
any mail being sent from the local machine. See the spey(8) man page for more
information.

Step 2
------

Now all you need to do is to run Spey itself. As superuser, do this:

	spey -f 0.0.0.0:25 -t localhost:2525 -v 999

Spey will start up, with maximum logging to /var/log/mail.0, listing on all
interfaces on port 25 and connecting to localhost:2525 (your real mail server).

Step 3
------

Test it!

Try sending some mail to your machine. If your machine is connected to the
'net, you'll probably be getting spam coming in. You should see copious amounts
of tracing appear detailing exactly what's happening.

After it's been running for a while, you can do:

	speyctl showdb
or	speyctl stats

...to show information about the database.

Step 4
------

You need to set up a cron job or some other way of periodically running the
command:

	speyctl purge

This will clear out stale entries from the database. If you don't do this, then
the database will grow unboundedly as Spey keeps track of every single piece of
spam you ever retrieve from a billion and one throwaway email addresses... and
while this won't do any harm, and indeed you might want to keep it as a record
(and it won't even slow Spey down much thanks to the magic of Sqlite), it is a
bit of a waste of space.

DOCUMENTATION
=============

Man pages are provided. They may or may not contain useful information.

BUGS
====

What, you want to know about them *all*? That's a big job...

These are the ones I know about and think are significant:

* If spey cannot write to its database, it has a tendency to crash. The fix for
  this could well just be to refuse to start up if the database is read only.
  
* If the database schema changes, for example if you add or remove a table,
  spey will crash cleanly (i.e. unexpectedly shut down). Playing with the
  schema is not recommended.

DISCLAIMER
==========

Spey is BETA SOFTWARE!

It is NOT RELIABLE!

DO NOT USE IT for mission-critical data because IT WILL LOST YOUR MAIL!

If it goes wrong DO NOT BLAME ME because YOU HAVE BEEN WARNED!

(It hasn't yet for me, but that's no guarantee.)

I have attempted to write it with robustness and security in mind --- for
example, there is exactly one placec where it does explicit dynamic memory
allocation, which means it has no buffers to overflow --- but I'm new at this,
okay?

LEGAL STUFF
===========

Spey is (C) 2004 David Given. It is distributable under the conditions laid out
by the GNU Public License, version 2. You can find a copy of this license in
the file COPYING.

REVISION HISTORY
================

Spey 0.3.2: 2004-11-21: Tracing now works correctly on gcc 3.3 and thereabouts;
Spey should now work on, hopefully, all versions of gcc that support a modern
iostreams implementation. Also fixed a problem where SIGPIPE would occasionally
be received, causing spey to silently shut down.

Spey 0.3.1: 2004-06-30: No longer shuts down prematurely if the downstream SMTP
server can't be contacted; added hardening against DoS attacks by flooding spey
with incoming connections. This also has the side effect of making spey a bit
more efficient in dealing with erroneous (or malicious) connections from
non-SMTP devices.

Spey 0.3.0: 2004-06-22: Added whitelist and blacklist support. Now compiles
under gcc 3.3. Several minor bugfixes.

Spey 0.2.9: 2004-05-30: Major internal rearrangements to support processing of
multiple connections at once. It should now be far more usable when dealing
with heavy loads.

Spey 0.2.1: 2004-05-19. Maintenance releasing fixing a small bug in 0.2's
speyctl.

Spey 0.2: 2004-05-15. Bug fixes, feature enhancements. Lots of stability and
performance tweaks; inetd mode; proper daemon support; decent relay checking;
rewrote speyctl in a real language.

Spey 0.1: 2004-04-28. First release.

