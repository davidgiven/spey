                                   SPEY V0.2.9
                                   ===========

                                  Beta release
                              (C) 2004 David Given
                                   2004-05-30

INTRODUCTION
============

Spey is a smart SMTP proxy whose main function in life is to block spam by
implementing greylisting. Greylisting is a really simple but effective way of
determining which messages are real and which aren't by relying on the fact
that spammers can't usually afford to run real mail servers; see:

	http://projects.puremagic.com/greylisting/

...for more information.

Spey uses the Sqlite library to keep track of which addresses its seen before,
so you'll need that before you can use it.

IF YOU'VE USED SPEY BEFORE
==========================

The database files used by 0.2 are NOT compatible with those used by 0.1.  You
will have to delete the file and recreate it using speyctl (the new speyctl
that comes with 0.2, of course). If you try to run spey with a 0.1
configuration file... well, on your own head be it.

INSTALLATION
============

The installation process is, unfortunately, very primitive. There's a simple
makefile. Run it. Spey should build. If you're the superuser, 'make install'
will install everything into, probably, the wrong place. A startup/shutdown
script will also be placed in /etc/init.d/spey.

All the code should, ideally, use standard Posix and C++ features. There might
be some Linuxisms or gccisms that have crept in; if you find any, these are
bugs, so please inform me.

CONFIGURATION
=============

Spey works by listening on one port, normally your convention SMTP port, and
forwarding the connections to another port, where your real mail server is
listening.  If you like you can run the mail server on another machine than you
run Spey; Spey itself doesn't care.

I'm assuming that you've reconfigured your mail server to listen on the address
localhost:2525 and that it's happy to receive mail from localhost.

Step 1
------

You need to configure Spey. Spey stores all its configuration information in
its database, which by default lives in /var/lib/misc/spey.db. You need to
create this before you can do anything. You can do this with the command:

	speyctl init

There are two things you need to do at minimum to configure spey. Firstly, you
need to tell spey who to announce itself as in the SMTP banner. (Technically
this isn't necessary, but the RFC requires it, and it's considered polite.) You
do it like this:

	speyctl set identity 'mydomain.com'

Secondly, you need to tell spey who it is going to be receiving mail from. Most
users will want to do this:

	speyctl relay add '@mydomain.com'
	speyctl relay add '127.0.0.1/32'

This tells spey to accept all mail to any address at mydomain.com; and to relay
any mail being sent from the local machine. See the spey(8) man page for more
information.

Step 2
------

Now all you need to do is to run Spey itself. As superuser, do this:

	spey -f 0.0.0.0:25 -t localhost:2525 -v 999

Spey will start up, with maximum logging to /var/log/mail.0, listing on all
interfaces on port 25 and connecting to localhost:2525 (your real mail server).

Step 3
------

Test it!

Try sending some mail to your machine. If your machine is connected to the
'net, you'll probably be getting spam coming in. You should see copious amounts
of tracing appear detailing exactly what's happening.

After it's been running for a while, you can do:

	speyctl showdb
or	speyctl stats

...to show information about the database.

Step 4
------

You need to set up a cron job or some other way of periodically running the
command:

	speyctl purge

This will clear out stale entries from the database. If you don't do this, then
the database will grow unboundedly as Spey keeps track of every single piece of
spam you ever retrieve from a billion and one throwaway email addresses... and
while this won't do any harm, and indeed you might want to keep it as a record
(and it won't even slow Spey down much thanks to the magic of Sqlite), it is a
bit of a waste of space.

DOCUMENTATION
=============

Man pages are provided. They may or may not contain useful information.

BUGS
====

What, all of them? Big job...

These are the ones I know about and think are significant:

* For obscure and mysterious reasons, spey will not build on gcc 3.3. I develop
  on 2.95, and that works fine. I have no idea why this is so; the vast
  diagnostics it gives me make no sense.

* If spey cannot write to its database, it has a tendency to crash. The fix for
  this could well just be to refuse to start up if the database is read only.
  
DISCLAIMER
==========

Spey is BETA SOFTWARE!

It is NOT RELIABLE!

DO NOT USE IT for mission-critical data because IT WILL LOST YOUR MAIL!

If it goes wrong DO NOT BLAME ME because YOU HAVE BEEN WARNED!

(It hasn't yet for me, but that's no guarantee.)

I have attempted to write it with robustness and security in mind --- for
example, it does not use explicit dynamic memory allocation *anywhere*, which
means it has no buffers to overflow --- but I'm new at this, okay?

LEGAL STUFF
===========

Spey is (C) 2004 David Given. It is distributable under the conditions laid out
by the GNU Public License, version 2. You can find a copy of this license in
the file COPYING.

REVISION HISTORY
================

Spey 0.2.9: 2004-05-30: Major internal rearrangements to support processing of
multiple connections at once. It should now be far more usable when dealing
with heavy loads.

Spey 0.2.1: 2004-05-19. Maintenance releasing fixing a small bug in 0.2's
speyctl.

Spey 0.2: 2004-05-15. Bug fixes, feature enhancements. Lots of stability and
performance tweaks; inetd mode; proper daemon support; decent relay checking;
rewrote speyctl in a real language.

Spey 0.1: 2004-04-28. First release.

CVS history for this file
-------------------------

$Source$
$State$
$Log$
Revision 1.6  2004/05/30 01:55:13  dtrg
Numerous and major alterations to implement a system for processing more than
one message at a time, based around coroutines. Fairly hefty rearrangement of
constructors and object ownership semantics. Assorted other structural
modifications.

Revision 1.5  2004/05/19 19:38:18  dtrg
Added the banner for 0.2.1.

Revision 1.4  2004/05/14 23:30:53  dtrg
Forgot to update the banner announcing the new version!

Revision 1.3  2004/05/14 23:26:57  dtrg
Added a version history.

Revision 1.2  2004/05/14 23:11:43  dtrg
Added decent relaying support. Also converted SocketAddress to use references a
lot rather than pass-by-value, out of general tidiness and the hope that it
will improve performance a bit.

Revision 1.1  2004/05/01 12:20:20  dtrg
Initial version.
